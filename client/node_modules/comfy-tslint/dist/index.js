"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var e_1, _a, e_2, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var process_1 = require("process");
var fs_1 = require("fs");
var glob_1 = require("glob");
var typescript_1 = require("typescript");
var linter_1 = require("./linter");
// Make sure we were given at least one argument.
if (process_1.argv.length < 3) {
    console.error('No arguments provided');
    (0, process_1.exit)(1);
}
// Look for flags indicating that we should allow mutation or loops without invariants.
var allowMutation = true;
var reqInvariants = true;
var fileIndex = 2;
if (process_1.argv[2] === '--no-mutation') { // even stricter
    allowMutation = false;
    fileIndex = 3;
}
else if (process_1.argv[2] === '--no-invariants') { // less strict
    reqInvariants = false;
    fileIndex = 3;
}
var exitCode = 0;
try {
    // Run the linter on each file provided.
    for (var _c = __values(process_1.argv.slice(fileIndex)), _d = _c.next(); !_d.done; _d = _c.next()) {
        var pattern = _d.value;
        var _loop_1 = function (fileName) {
            var root = (0, typescript_1.createSourceFile)(fileName, (0, fs_1.readFileSync)(fileName, 'utf8'), typescript_1.ScriptTarget.Latest);
            (0, linter_1.lintFile)({ root: root, fileName: fileName, allowMutation: allowMutation, reqInvariants: reqInvariants, error: function (message, start, _end) {
                    var lineChar = root.getLineAndCharacterOfPosition(start);
                    console.error("".concat(fileName, ":").concat(lineChar.line + 1, ":").concat(lineChar.character + 1, ": ").concat(message));
                    exitCode = 1;
                }
            });
        };
        try {
            for (var _e = (e_2 = void 0, __values(glob_1.glob.sync(pattern))), _f = _e.next(); !_f.done; _f = _e.next()) {
                var fileName = _f.value;
                _loop_1(fileName);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
    }
    finally { if (e_1) throw e_1.error; }
}
(0, process_1.exit)(exitCode);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBcUM7QUFDckMseUJBQWtDO0FBQ2xDLDZCQUE0QjtBQUM1Qix5Q0FBd0U7QUFDeEUsbUNBQW9DO0FBR3BDLGlEQUFpRDtBQUNqRCxJQUFJLGNBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUN2QyxJQUFBLGNBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztDQUNUO0FBRUQsdUZBQXVGO0FBQ3ZGLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQztBQUN6QixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDekIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLElBQUksY0FBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLGVBQWUsRUFBRSxFQUFHLGdCQUFnQjtJQUNsRCxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLFNBQVMsR0FBRyxDQUFDLENBQUM7Q0FDZjtLQUFNLElBQUksY0FBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLGlCQUFpQixFQUFFLEVBQUcsY0FBYztJQUN6RCxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLFNBQVMsR0FBRyxDQUFDLENBQUM7Q0FDZjtBQUVELElBQUksUUFBUSxHQUFXLENBQUMsQ0FBQzs7SUFFekIsd0NBQXdDO0lBQ3hDLEtBQXNCLElBQUEsS0FBQSxTQUFBLGNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7UUFBeEMsSUFBTSxPQUFPLFdBQUE7Z0NBQ0wsUUFBUTtZQUNqQixJQUFNLElBQUksR0FBZSxJQUFBLDZCQUFnQixFQUNyQyxRQUFRLEVBQUUsSUFBQSxpQkFBWSxFQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSx5QkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25FLElBQUEsaUJBQVEsRUFBQyxFQUFDLElBQUksTUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLGFBQWEsZUFBQSxFQUFFLGFBQWEsZUFBQSxFQUNwRCxLQUFLLEVBQUUsVUFBQyxPQUFlLEVBQUUsS0FBYSxFQUFFLElBQWE7b0JBQ25ELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDMUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFHLFFBQVEsY0FBSSxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsY0FBSSxRQUFRLENBQUMsU0FBUyxHQUFHLENBQUMsZUFBSyxPQUFPLENBQUUsQ0FBQyxDQUFDO29CQUN4RixRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLENBQUM7YUFDRixDQUFDLENBQUM7OztZQVRMLEtBQXVCLElBQUEsb0JBQUEsU0FBQSxXQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUEsZ0JBQUE7Z0JBQXBDLElBQU0sUUFBUSxXQUFBO3dCQUFSLFFBQVE7YUFVbEI7Ozs7Ozs7OztLQUNGOzs7Ozs7Ozs7QUFFRCxJQUFBLGNBQUksRUFBQyxRQUFRLENBQUMsQ0FBQyJ9